@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using Microsoft.AspNetCore.Html
@inject IToastService toastService
@inject StateContainer state

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content @theme.ThemeStyle">
            <div class="modal-header bg-navcolor text-white">
                <h3 class="modal-title">@title</h3>
            </div>
            <div class="modal-body">
                @((MarkupString)message)
                <div class="form-group">
                    <label for="name">Name</label>
                    <input title="Name" value="@itemName" type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                </div>
                @if (type != "ResourceComponent")
                {
                    <div class="form-group">
                        <label for="shortName">Short Name</label>
                        <input title="Short Name" value="@itemShortName" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value;})" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button title="Add" @onclick="Save" class="btn btn-success">Add</button>
                <button title="Cancel" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ThemeInfo theme { get; set; }

    [Parameter] public int id { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string message { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public string? parentcomponent { get; set; }


    private ServiceResponse serviceResponse = new();
    private string? itemName;
    private string? itemShortName;

    protected override async void OnInitialized()
    {

    }

    async void Save()
    {
        bool valid = false;
        if (type == "ResourceComponent")
        {
            if (itemName != null)
            {
                if (itemName != "")
                {
                    valid = true;
                    ResourceComponent resourceComponent = new()
                        {
                            Name = itemName,
                            DisplayName = itemName,
                            IsCustom = true
                        };
                    serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                }
                else
                {
                    toastService.ShowError("You must enter a name!", "ERROR");
                }
            }
            else
            {
                toastService.ShowError("You must enter a name!", "ERROR");
            }
        }
        else
        {
            if ((itemName != null) && (itemShortName != null))
            {
                if ((itemName != "") && (itemShortName != ""))
                {
                    if (ValidationHelper.ValidateShortName(itemShortName, type))
                    {
                        valid = true;
                        itemShortName = itemShortName.ToLower();
                        switch (type)
                        {
                            case "ResourceEnvironment":
                                ResourceEnvironment resourceEnvironment = new ResourceEnvironment()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                                break;
                            case "ResourceLocation":
                                ResourceLocation resourceLocation = new ResourceLocation()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceLocationService.PostItem(resourceLocation);
                                break;
                            case "ResourceOrg":
                                ResourceOrg resourceOrg = new ResourceOrg()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                                break;
                            case "ResourceProjAppSvc":
                                ResourceProjAppSvc resourceProjAppSvc = new ResourceProjAppSvc()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                                break;
                            case "ResourceUnitDept":
                                ResourceUnitDept resourceUnitDept = new ResourceUnitDept()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                                break;
                            case "ResourceFunction":
                                ResourceFunction resourceFunction = new ResourceFunction()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower()

                                    };
                                serviceResponse = await ResourceFunctionService.PostItem(resourceFunction);
                                break;
                            case "CustomComponent":
                                CustomComponent customComponent = new CustomComponent()
                                    {
                                        Name = itemName,
                                        ShortName = itemShortName.ToLower(),
                                        ParentComponent = GeneralHelper.NormalizeName(parentcomponent, true)
                                    };
                                serviceResponse = await CustomComponentService.PostItem(customComponent);
                                break;
                        }
                    }
                    else
                    {
                        toastService.ShowError("You must enter a name and short name!", "ERROR");
                    }
                }
                else
                {
                    toastService.ShowError("You must enter a name and short name!", "ERROR");
                }
            }
        }

        if (valid)
        {
            if (serviceResponse.Success)
            {
                ModalInstance.CloseAsync();
                toastService.ShowSuccess(type.Replace("Resource", "Resource ") + " added!", "SUCCESS");
                AdminLogService.PostItem(new AdminLogMessage() { Title = "SUCCESS", Message = "(" + type + ") " + itemName + " added!" });
            }
            else
            {
                toastService.ShowError("There was an error adding the " + GeneralHelper.NormalizeName(type, false) + "!", "ERROR");
            }
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}